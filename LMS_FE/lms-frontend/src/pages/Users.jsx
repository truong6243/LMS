import { useState, useEffect } from 'react';
import { getAllUsers, createUser, updateUser, deleteUser, getUserRoles, assignRole, removeRole } from '../api/users';
import { getAllRoles } from '../api/roles';

export default function Users() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [showRoleModal, setShowRoleModal] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [selectedUser, setSelectedUser] = useState(null);
  const [userRoles, setUserRoles] = useState([]);
  const [allRoles, setAllRoles] = useState([]);
  const [selectedRoleToAdd, setSelectedRoleToAdd] = useState('');
  const [formData, setFormData] = useState({
    username: '',
    password: '',
    email: '',
    fullName: '',
    status: 1
  });

  // Load danh s√°ch users
  useEffect(() => {
    loadUsers();
  }, []);

  const loadUsers = async () => {
    try {
      setLoading(true);
      const data = await getAllUsers();
      setUsers(data);
    } catch (error) {
      console.error('Failed to load users:', error);
      alert('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi d√πng');
    } finally {
      setLoading(false);
    }
  };

  // M·ªü modal ƒë·ªÉ t·∫°o user m·ªõi
  const handleCreate = () => {
    setEditingUser(null);
    setFormData({
      username: '',
      password: '',
      email: '',
      fullName: '',
      status: 1
    });
    setShowModal(true);
  };

  // M·ªü modal ƒë·ªÉ s·ª≠a user
  const handleEdit = (user) => {
    setEditingUser(user);
    setFormData({
      username: user.username,
      password: '',
      email: user.email || '',
      fullName: user.fullName || '',
      status: user.status
    });
    setShowModal(true);
  };

  // X·ª≠ l√Ω submit form
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      if (editingUser) {
        // Update
        await updateUser(editingUser.userId, {
          email: formData.email,
          fullName: formData.fullName,
          status: formData.status
        });
        alert('C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng');
      } else {
        // Create
        await createUser(formData);
        alert('T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng');
      }
      
      setShowModal(false);
      loadUsers();
    } catch (error) {
      console.error('Failed to save user:', error);
      alert(editingUser ? 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng' : 'Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng');
    }
  };

  // X√≥a user
  const handleDelete = async (user) => {
    if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng "${user.username}"?`)) {
      return;
    }

    try {
      await deleteUser(user.userId);
      alert('X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng');
      loadUsers();
    } catch (error) {
      console.error('Failed to delete user:', error);
      alert('Kh√¥ng th·ªÉ x√≥a ng∆∞·ªùi d√πng');
    }
  };

  // M·ªü modal qu·∫£n l√Ω vai tr√≤
  const handleManageRoles = async (user) => {
    try {
      setSelectedUser(user);
      setSelectedRoleToAdd(''); // Reset selection
      
      // Load vai tr√≤ hi·ªán t·∫°i c·ªßa user
      const currentRoles = await getUserRoles(user.userId);
      setUserRoles(currentRoles);
      
      // Load t·∫•t c·∫£ vai tr√≤ trong h·ªá th·ªëng
      const roles = await getAllRoles();
      setAllRoles(roles);
      
      setShowRoleModal(true);
    } catch (error) {
      console.error('Failed to load roles:', error);
      alert('Kh√¥ng th·ªÉ t·∫£i danh s√°ch vai tr√≤');
    }
  };

  // G√°n vai tr√≤ cho user
  const handleAssignRole = async () => {
    if (!selectedRoleToAdd) {
      alert('Vui l√≤ng ch·ªçn vai tr√≤');
      return;
    }

    try {
      await assignRole(selectedUser.userId, parseInt(selectedRoleToAdd));
      alert('G√°n vai tr√≤ th√†nh c√¥ng');
      
      // Reset selection
      setSelectedRoleToAdd('');
      
      // Reload l·∫°i danh s√°ch vai tr√≤
      const currentRoles = await getUserRoles(selectedUser.userId);
      setUserRoles(currentRoles);
    } catch (error) {
      console.error('Failed to assign role:', error);
      alert('Kh√¥ng th·ªÉ g√°n vai tr√≤');
    }
  };

  // X√≥a vai tr√≤ kh·ªèi user
  const handleRemoveRole = async (roleId) => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a vai tr√≤ n√†y?')) {
      return;
    }

    try {
      await removeRole(selectedUser.userId, roleId);
      alert('X√≥a vai tr√≤ th√†nh c√¥ng');
      
      // Reload l·∫°i danh s√°ch vai tr√≤
      const currentRoles = await getUserRoles(selectedUser.userId);
      setUserRoles(currentRoles);
    } catch (error) {
      console.error('Failed to remove role:', error);
      alert('Kh√¥ng th·ªÉ x√≥a vai tr√≤');
    }
  };

  if (loading) {
    return <div style={{ padding: '24px' }}>ƒêang t·∫£i...</div>;
  }

  return (
    <div style={{ padding: '24px' }}>
      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '24px' }}>
        <h1 style={{ fontSize: '24px', fontWeight: 'bold', margin: 0 }}>Qu·∫£n l√Ω ng∆∞·ªùi d√πng</h1>
        <button
          onClick={handleCreate}
          style={{
            padding: '10px 20px',
            backgroundColor: '#1976d2',
            color: 'white',
            border: 'none',
            borderRadius: '4px',
            cursor: 'pointer',
            fontSize: '14px'
          }}
        >
          ‚ûï Th√™m ng∆∞·ªùi d√πng
        </button>
      </div>

      {/* B·∫£ng danh s√°ch users */}
      <div style={{ backgroundColor: 'white', borderRadius: '8px', boxShadow: '0 1px 3px rgba(0,0,0,0.1)', overflow: 'hidden' }}>
        <table style={{ width: '100%', borderCollapse: 'collapse' }}>
          <thead style={{ backgroundColor: '#f5f5f5' }}>
            <tr>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #ddd' }}>ID</th>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #ddd' }}>Username</th>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #ddd' }}>H·ªç t√™n</th>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #ddd' }}>Email</th>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #ddd' }}>Tr·∫°ng th√°i</th>
              <th style={{ padding: '12px', textAlign: 'left', borderBottom: '2px solid #ddd' }}>Ng√†y t·∫°o</th>
              <th style={{ padding: '12px', textAlign: 'center', borderBottom: '2px solid #ddd' }}>Thao t√°c</th>
            </tr>
          </thead>
          <tbody>
            {users.length === 0 ? (
              <tr>
                <td colSpan="7" style={{ padding: '24px', textAlign: 'center', color: '#999' }}>
                  Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o
                </td>
              </tr>
            ) : (
              users.map((user) => (
                <tr key={user.userId} style={{ borderBottom: '1px solid #eee' }}>
                  <td style={{ padding: '12px' }}>{user.userId}</td>
                  <td style={{ padding: '12px', fontWeight: '500' }}>{user.username}</td>
                  <td style={{ padding: '12px' }}>{user.fullName || '-'}</td>
                  <td style={{ padding: '12px' }}>{user.email || '-'}</td>
                  <td style={{ padding: '12px' }}>
                    <span style={{
                      padding: '4px 8px',
                      borderRadius: '4px',
                      fontSize: '12px',
                      backgroundColor: user.status === 1 ? '#e8f5e9' : '#ffebee',
                      color: user.status === 1 ? '#2e7d32' : '#c62828'
                    }}>
                      {user.status === 1 ? 'Ho·∫°t ƒë·ªông' : 'V√¥ hi·ªáu h√≥a'}
                    </span>
                  </td>
                  <td style={{ padding: '12px' }}>
                    {new Date(user.createdAt).toLocaleDateString('vi-VN')}
                  </td>
                  <td style={{ padding: '12px', textAlign: 'center' }}>
                    <button
                      onClick={() => handleManageRoles(user)}
                      style={{
                        padding: '6px 12px',
                        marginRight: '8px',
                        backgroundColor: '#9c27b0',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '12px'
                      }}
                    >
                      üë• Vai tr√≤
                    </button>
                    <button
                      onClick={() => handleEdit(user)}
                      style={{
                        padding: '6px 12px',
                        marginRight: '8px',
                        backgroundColor: '#2196f3',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '12px'
                      }}
                    >
                      ‚úèÔ∏è S·ª≠a
                    </button>
                    <button
                      onClick={() => handleDelete(user)}
                      style={{
                        padding: '6px 12px',
                        backgroundColor: '#f44336',
                        color: 'white',
                        border: 'none',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        fontSize: '12px'
                      }}
                    >
                      üóëÔ∏è X√≥a
                    </button>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Modal t·∫°o/s·ª≠a user */}
      {showModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: '24px',
            borderRadius: '8px',
            width: '500px',
            maxWidth: '90%'
          }}>
            <h2 style={{ marginTop: 0, marginBottom: '20px' }}>
              {editingUser ? 'S·ª≠a ng∆∞·ªùi d√πng' : 'Th√™m ng∆∞·ªùi d√πng m·ªõi'}
            </h2>
            
            <form onSubmit={handleSubmit}>
              <div style={{ marginBottom: '16px' }}>
                <label style={{ display: 'block', marginBottom: '4px', fontWeight: '500' }}>
                  Username {!editingUser && <span style={{ color: 'red' }}>*</span>}
                </label>
                <input
                  type="text"
                  value={formData.username}
                  onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                  disabled={!!editingUser}
                  required={!editingUser}
                  style={{
                    width: '100%',
                    padding: '8px',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    fontSize: '14px',
                    backgroundColor: editingUser ? '#f5f5f5' : 'white'
                  }}
                />
              </div>

              {!editingUser && (
                <div style={{ marginBottom: '16px' }}>
                  <label style={{ display: 'block', marginBottom: '4px', fontWeight: '500' }}>
                    M·∫≠t kh·∫©u <span style={{ color: 'red' }}>*</span>
                  </label>
                  <input
                    type="password"
                    value={formData.password}
                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                    required
                    style={{
                      width: '100%',
                      padding: '8px',
                      border: '1px solid #ddd',
                      borderRadius: '4px',
                      fontSize: '14px'
                    }}
                  />
                </div>
              )}

              <div style={{ marginBottom: '16px' }}>
                <label style={{ display: 'block', marginBottom: '4px', fontWeight: '500' }}>
                  H·ªç t√™n
                </label>
                <input
                  type="text"
                  value={formData.fullName}
                  onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}
                  style={{
                    width: '100%',
                    padding: '8px',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    fontSize: '14px'
                  }}
                />
              </div>

              <div style={{ marginBottom: '16px' }}>
                <label style={{ display: 'block', marginBottom: '4px', fontWeight: '500' }}>
                  Email
                </label>
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                  style={{
                    width: '100%',
                    padding: '8px',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    fontSize: '14px'
                  }}
                />
              </div>

              <div style={{ marginBottom: '24px' }}>
                <label style={{ display: 'block', marginBottom: '4px', fontWeight: '500' }}>
                  Tr·∫°ng th√°i
                </label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData({ ...formData, status: parseInt(e.target.value) })}
                  style={{
                    width: '100%',
                    padding: '8px',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    fontSize: '14px'
                  }}
                >
                  <option value={1}>Ho·∫°t ƒë·ªông</option>
                  <option value={0}>V√¥ hi·ªáu h√≥a</option>
                </select>
              </div>

              <div style={{ display: 'flex', gap: '12px', justifyContent: 'flex-end' }}>
                <button
                  type="button"
                  onClick={() => setShowModal(false)}
                  style={{
                    padding: '10px 20px',
                    backgroundColor: '#f5f5f5',
                    color: '#333',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    fontSize: '14px'
                  }}
                >
                  H·ªßy
                </button>
                <button
                  type="submit"
                  style={{
                    padding: '10px 20px',
                    backgroundColor: '#1976d2',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: 'pointer',
                    fontSize: '14px'
                  }}
                >
                  {editingUser ? 'C·∫≠p nh·∫≠t' : 'T·∫°o m·ªõi'}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Modal qu·∫£n l√Ω vai tr√≤ */}
      {showRoleModal && selectedUser && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          backgroundColor: 'rgba(0,0,0,0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            backgroundColor: 'white',
            padding: '24px',
            borderRadius: '8px',
            width: '600px',
            maxWidth: '90%',
            maxHeight: '80vh',
            overflow: 'auto'
          }}>
            <h2 style={{ marginTop: 0, marginBottom: '20px' }}>
              Qu·∫£n l√Ω vai tr√≤ - {selectedUser.username}
            </h2>
            
            {/* Vai tr√≤ hi·ªán t·∫°i */}
            <div style={{ marginBottom: '24px' }}>
              <h3 style={{ fontSize: '16px', marginBottom: '12px' }}>Vai tr√≤ hi·ªán t·∫°i</h3>
              {userRoles.length === 0 ? (
                <p style={{ color: '#999', fontStyle: 'italic' }}>Ch∆∞a c√≥ vai tr√≤ n√†o</p>
              ) : (
                <div style={{ display: 'flex', flexWrap: 'wrap', gap: '8px' }}>
                  {userRoles.map((role) => (
                    <div
                      key={role.roleId}
                      style={{
                        display: 'flex',
                        alignItems: 'center',
                        gap: '8px',
                        padding: '8px 12px',
                        backgroundColor: '#e3f2fd',
                        borderRadius: '16px',
                        fontSize: '14px'
                      }}
                    >
                      <span>{role.roleName}</span>
                      <button
                        onClick={() => handleRemoveRole(role.roleId)}
                        style={{
                          padding: '2px 6px',
                          backgroundColor: '#f44336',
                          color: 'white',
                          border: 'none',
                          borderRadius: '50%',
                          cursor: 'pointer',
                          fontSize: '12px',
                          lineHeight: '1'
                        }}
                      >
                        √ó
                      </button>
                    </div>
                  ))}
                </div>
              )}
            </div>

            {/* Th√™m vai tr√≤ */}
            <div style={{ marginBottom: '24px' }}>
              <h3 style={{ fontSize: '16px', marginBottom: '12px' }}>Th√™m vai tr√≤</h3>
              <div style={{ display: 'flex', gap: '12px', alignItems: 'flex-start' }}>
                <select
                  value={selectedRoleToAdd}
                  onChange={(e) => setSelectedRoleToAdd(e.target.value)}
                  style={{
                    flex: 1,
                    padding: '10px',
                    fontSize: '14px',
                    border: '1px solid #ddd',
                    borderRadius: '4px',
                    backgroundColor: 'white'
                  }}
                >
                  <option value="">-- Ch·ªçn vai tr√≤ --</option>
                  {allRoles
                    .filter(role => !userRoles.find(ur => ur.roleId === role.roleId))
                    .map((role) => (
                      <option key={role.roleId} value={role.roleId}>
                        {role.roleName} ({role.roleCode})
                      </option>
                    ))}
                </select>
                <button
                  onClick={handleAssignRole}
                  disabled={!selectedRoleToAdd}
                  style={{
                    padding: '10px 24px',
                    backgroundColor: selectedRoleToAdd ? '#4caf50' : '#ccc',
                    color: 'white',
                    border: 'none',
                    borderRadius: '4px',
                    cursor: selectedRoleToAdd ? 'pointer' : 'not-allowed',
                    fontSize: '14px',
                    fontWeight: '500',
                    whiteSpace: 'nowrap'
                  }}
                >
                  Th√™m
                </button>
              </div>
              {allRoles.filter(role => !userRoles.find(ur => ur.roleId === role.roleId)).length === 0 && (
                <p style={{ color: '#999', fontStyle: 'italic', marginTop: '12px', marginBottom: 0 }}>ƒê√£ g√°n t·∫•t c·∫£ vai tr√≤</p>
              )}
            </div>

            <div style={{ display: 'flex', justifyContent: 'flex-end' }}>
              <button
                onClick={() => setShowRoleModal(false)}
                style={{
                  padding: '10px 20px',
                  backgroundColor: '#1976d2',
                  color: 'white',
                  border: 'none',
                  borderRadius: '4px',
                  cursor: 'pointer',
                  fontSize: '14px'
                }}
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
